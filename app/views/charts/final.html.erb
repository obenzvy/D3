

<style>
/* tell the SVG path to be a thin blue line without any area fill */
path {
	stroke: steelblue;
	stroke-width: 1;
	fill: none;
}

.axis {
	shape-rendering: crispEdges;
}

.x.axis line {
	stroke: lightgrey;
}

.x.axis .minor {
	stroke-opacity: .5;
}

.x.axis line, .x.axis path {
	fill: none;
	stroke: #000;
}

.y.axis line, .y.axis path {
	fill: none;
	stroke: #000;
}
</style>

<body>
<div id="graph1" class="aGraph" style="position:absolute;top:0px;left:0; float:left;"></div>


	<script>
	/* implementation heavily influenced by http://bl.ocks.org/1166403 */

		// define dimensions of graph
		var m = [10, 80, 10, 80]; // margins
		var w = 1000 - m[1] - m[3]; // width
		var h = 40 - m[0] - m[2]; // height

		// create a simple comprehension array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
		$(document).ready(function() {

 var ahas = [];
      $.each(stats.aha, function(index, value) {
      	(ahas.push(parseInt(value.time)));
      });
  //create a function to measure the total time of the video
        function arrayLength(value, length) {
        	var arr = [], i = length;
        	while (i--) {
        		arr[i] = value;
        	}
        	return arr;
        };

	    //setup array to handle aggregate values
	    var aha_count = arrayLength(0, stats.duration);

        //convert all intances into aggregate values

        $.each(ahas, function(index, value) {
        	aha_count[value-1]++;
        });

var x = d3.scale.linear().domain([0, aha_count.length]).range([0, w]);
		// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
		var y = d3.scale.linear().domain([0, 100]).range([h, 0]);


    	console.log(ahas);
    	console.log(aha_count);

    		var graph = d3.select("#graph").append("svg:svg")
			.attr("width", w + m[1] + m[3])
			.attr("height", h + m[0] + m[2])
			.append("svg:g")
			.attr("transform", "translate(" + m[3] + "," + m[0] + ")");

graph.selectAll(".point")
      .data(ahas)
    .enter().append("path")
      .attr("class", "point")
      .attr("d", d3.svg.symbol().type("triangle-up"))
      .attr("transform", function(d) { return "translate(" + x(d) + "," + (y(d)+80) + ")"; });


		});
		</script>



<!-- //////////////////////////////////////////////////////////////////////// -->
<!-- //////////////////////////////////////////////////////////////////////// -->
<!-- //////////////////////////////////////////////////////////////////////// -->

	<div id="graph" class="aGraph" style="position:absolute;top:0px;left:0; float:left;"></div>


	<script>
	/* implementation heavily influenced by http://bl.ocks.org/1166403 */

		// define dimensions of graph
		var m = [80, 80, 80, 80]; // margins
		var w = 1000 - m[1] - m[3]; // width
		var h = 400 - m[0] - m[2]; // height

		// create a simple comprehension array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
		$(document).ready(function() {

    	//pull all comprehension instances into an array  
    	var comprehension = [];
    	$.each(stats.huh, function(index, value) {
    		comprehension.push(value.time);
    	});

      //pull all comprehension instances into an array
     


   
        //create a function to measure the total time of the video
        function arrayLength(value, length) {
        	var arr = [], i = length;
        	while (i--) {
        		arr[i] = value;
        	}
        	return arr;
        };

	    //setup array to handle aggregate values
	    var comprehension_count = arrayLength(stats.viewers, stats.duration);
	  

        //convert all intances into aggregate values
        $.each(comprehension, function(index, value) {
        	comprehension_count[value-1]--;
        });

 



    	//convert aggregate values into a percentage
    	var comprehension_percentage = [];
    	$.each(comprehension_count, function(index, value) {
    		comprehension_percentage.push(value / stats.viewers * 100);
    	});


        var questions = [];
        $.each(stats.questions, function(index, value) {
        	questions.push([value.question, value.time,  comprehension_percentage[value.time - 1]]);
        });

    	console.log(comprehension);
    	console.log(comprehension_count);
    	console.log(comprehension_percentage);
    	console.log(questions)



		// X scale will fit all values from comprehension_percentage[] within pixels 0-w
		var x = d3.scale.linear().domain([0, comprehension_percentage.length]).range([0, w]);
		// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
		var y = d3.scale.linear().domain([0, 100]).range([h, 0]);
			// automatically determining max range can work something like this
			// var y = d3.scale.linear().domain([0, d3.max(comprehension_percentage)]).range([h, 0]);

		// create a line function that can convert comprehension_percentage[] into x and y points
		var line = d3.svg.line()
			// assign the X function to plot our line as we wish
			.x(function(d,i) { 
				// verbose logging to show what's actually being done
				console.log('Plotting X value for comprehension_percentage point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
				// return the X coordinate where we want to plot this comprehension_percentagepoint
				return x(i); 
			})
			.y(function(d) { 
				// verbose logging to show what's actually being done
				console.log('Plotting Y value for comprehension_percentage point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
				// return the Y coordinate where we want to plot this comprehension_percentagepoint
				return y(d);
			})


			// Add an SVG element with the desired dimensions and margin.
			var graph = d3.select("#graph").append("svg:svg")
			.attr("width", w + m[1] + m[3])
			.attr("height", h + m[0] + m[2])
			.append("svg:g")
			.attr("transform", "translate(" + m[3] + "," + m[0] + ")");

			
			// Add the x-axis.
			var xAxis = d3.svg.axis().scale(x).tickValues([comprehension_percentage.length]).orient("bottom");
			graph.append("svg:g")
			.attr("class", "x axis")
			.attr("transform", "translate(-25," + (h) + ")")
			.call(xAxis);

			// Add axis on top of graph
			var topAxis = d3.svg.axis().scale(x).tickValues("","");
			graph.append("svg:g")
			.attr("class", "x axis")
			.attr("transform", "translate(-25, -5)")
			.call(topAxis);




			// create left yAxis
			var yAxisLeft = d3.svg.axis().scale(y).tickValues([50, 100]).orient("left");
			// Add the y-axis to the left
			graph.append("svg:g")
			.attr("class", "y axis")
			.attr("transform", "translate(-25,0)")
			.call(yAxisLeft);



  			// Add the line by appending an svg:path element with the comprehension_percentage line we created above
			// do this AFTER the axes above so that the line is above the tick-lines
			graph.append("svg:path").attr("d", line(comprehension_percentage));
			console.log('outputting contents of graph variable')
			console.log(graph);




  			//show ahas
			// var triangles = graph.selectAll("triangle-down")
			//    .data(ahas)
			//    .enter()
			//    .append("triangle-down")
			//    .attr("tx", function(d) {
			//    		return (d[0]);
			//    })
			//    .attr("ty", function(d) {
			//    		return (d[1]);
			//    });

  			//show question circles
  			var circle = graph.selectAll("circle")
  				.data(questions)
  				.enter()
  				.append("circle")
  				.attr("cx", function(d) {
  					return x(d[1]-1);
  				})
  			.attr("cy", function(d) {
  				return y(d[2]);
  			})
  			.attr("r", 3)
  			.on("mouseover", mouse_over)
  			.on("mouseout", mouse_out );


  			// graph.append("svg:path").data(ahas).attr("d", d3.svg.symbol().type("triangle-up"));

// graph.selectAll(".point")
//       .data(ahas)
//     .enter().append("path")
//       .attr("class", "point")
//       .attr("d", d3.svg.symbol().type("triangle-up"))
//       .attr("transform", function(d) { return "translate(" + x(d) + "," + y(d) + ")"; });
  			

  			function mouse_over(e){
  				var color_change =d3.select(this).style("fill", "blue");
  				var blurb = e[0];
  			
  				$("#blurb-content").html(blurb);
  			};

  			function mouse_out(){

  				var reset = d3.select(this).style("fill", "black");
  				
  				$("#blurb-content").html('');
  			};






  		});



</script>
<div id="blurb">
	
	<div id="blurb-content"></div>
</div>